// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Workspace {
  id        String   @id @default(cuid())
  name      String   @default("Personal")
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]
  reports     Report[]
  invitations Invitation[]

  @@index([userId])
}

enum Role {
  Admin
  Member
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          Role        @default(Admin)
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  reports       Report[]
  workspaces    Workspace[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  stripeIsActive         Boolean   @default(false) @map(name: "stripe_subscription_status")
}

model Invitation {
  id          String   @id @default(cuid())
  email       String
  workspaceId String
  role        Role
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([email])
}

model Document {
  id           String   @id @default(cuid())
  userId       String
  workspaceId  String
  title        String
  content      String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastAccessed DateTime @updatedAt
  favorite     Boolean  @default(false)
  shared       Boolean  @default(false)
  status       String   @default("backlog")
  priority     String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Keyword   Keyword[]
}

model Keyword {
  id         String @id @default(cuid())
  documentId String
  word       String
  embedding  Json?

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([word])
}

enum Status {
  Success
  Failed
}

model Report {
  id          String   @id @default(cuid())
  userId      String
  workspaceId String
  title       String
  createdAt   DateTime @default(now())
  status      Status
  downloadUrl String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
